package com.kreig133.daogenerator.common;

import com.kreig133.daogenerator.mybatis.wrappers.strategy.FuctionalObject;
import com.kreig133.daogenerator.parameter.Parameter;

import java.util.List;
import static com.kreig133.daogenerator.common.Utils.*;

/**
 * @author eshangareev
 * @version 1.0
 */
public class InOutClass {
    private static final String COMMENT_TO_CLASS = "/**\n" +
                                           " * Generated by DaoGenerator 0.2\n"+
                                           " * @author eshangareev\n" +
                                           " * @version 1.0\n" +
                                           " */\n";
    private static final String IMPORTS = "import java.io.Serializable;\n" +
                                  "import java.util.*;\n\n";

    public String package_;


    private final List< Parameter > parameters;
    private String name;

    public InOutClass( String package_, List<Parameter> parameters, String name ) {
        this.package_ = package_;
        this.parameters = parameters;
        this.name = name;
    }

    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("package ");
        result.append( package_ );
        result.append(";\n\n");
        result.append(IMPORTS);
        result.append(COMMENT_TO_CLASS);
        result.append("public class ").append(name).append( " implements Serializable {\n\n" );

        writeSerialVersionUID( result );
        writeEmptyConstructor( result );
        writeFullConstructor( result );

        for(Parameter p : parameters){
            result.append(p.toString());
            result.append(p.generateGetter());
            result.append(p.generateSetter());
        }
        result.append("}");

        return result.toString();
    }

    private void writeSerialVersionUID( StringBuilder builder ) {
        builder.append( "\n    private static final long serialVersionUID = " );
        builder.append( (long)( Math.random() * Long.MAX_VALUE ) );
        builder.append( "L;\n\n" );
    }

    private void writeEmptyConstructor( StringBuilder builder ) {
        builder.append( "    public " );
        builder.append( name );
        builder.append( "(){\n    }\n\n" );
    }

    private void writeFullConstructor( StringBuilder builder ) {
        builder.append( "    public " );
        builder.append( name );
        builder.append( "(\n" );
        iterateForParameterList( builder, parameters, 2, new FuctionalObject() {
            @Override
            public void writeString( StringBuilder builder, Parameter p ) {
                builder.append( p.getType() );
                builder.append( " " );
                builder.append( p.getName() );
            }
            @Override
            public boolean filter( Parameter p ) {
                return true;
            }
        } );

        builder.append( "    ){\n" );
        for( Parameter p: parameters ){
            builder.append( "        this." );
            builder.append( p.getName() );
            builder.append( " = " );
            builder.append( p.getName() );
            builder.append( ";\n" );
        }
    }

    public String getName() {
        return name;
    }

    public void setName( String name ) {
        this.name = name;
    }

    public List<Parameter> getParameters() {
        return parameters;
    }
}
